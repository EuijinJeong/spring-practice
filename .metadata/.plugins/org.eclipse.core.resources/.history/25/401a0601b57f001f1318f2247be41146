package com.ktdsuniversity.edu.hello_spring.bbs.web;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.io.InputStreamResource;
import org.springframework.core.io.Resource;
import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;

import com.ktdsuniversity.edu.hello_spring.bbs.service.BoardService;
import com.ktdsuniversity.edu.hello_spring.bbs.vo.BoardListVO;
import com.ktdsuniversity.edu.hello_spring.bbs.vo.BoardVO;
import com.ktdsuniversity.edu.hello_spring.bbs.vo.ModifyBoardVO;
import com.ktdsuniversity.edu.hello_spring.bbs.vo.WriteBoardVO;

/**
 * 
 */
@Controller
public class BoardController {

	@Autowired
	private BoardService boardService;

	@GetMapping("/board/list") // http://localhost:8080/board/list로 연결
	public String viewBoardList(Model model) {
		BoardListVO boardListVO = this.boardService.getAllBoard();

		model.addAttribute("boardListVO", boardListVO);

		return "board/boardlist";
	}

	@GetMapping("/board/write")
	public String writeNewBoard() {
		return "board/boardwrite";
	}

	/**
	 * 사용자가 입력한 값을 서버에 전송하기 위한 컨트롤러 메서드.
	 * 
	 * @param writeBoardVO : 사용자가 입력한 값을 담은 VO 객체
	 * @return
	 */
	@PostMapping("/board/write")
	public String doCreateNewBoard(WriteBoardVO writeBoardVO) {

		System.out.println("게시글 제목: " + writeBoardVO.getSubject());
		System.out.println("이메일 주소:" + writeBoardVO.getEmail());
		System.out.println("게시글 내용: " + writeBoardVO.getContent());

		boolean isSuccess = boardService.createNewBoard(writeBoardVO);

		System.out.println("성공적으로 게시글 등록이 완료되었습니다." + isSuccess);

		return "redirect:/board/list";
	}

	@GetMapping("/board/view") // http://localhost:8080/board/view?id=1
	public String viewOneBoard(@RequestParam int id, Model model) {

		BoardVO boardVO = boardService.getOneBoard(id, true);

		// Model 객체에 boardVO 데이터를 추가한다.
		model.addAttribute("boardVO", boardVO);

		// 파일의 경로이다.
		return "board/boardview";
	}

	@GetMapping("/board/modify/{id}") // http://localhost:8080/board/modify/1
	public String viewBoardModifyPage(@PathVariable int id, Model model) {

		BoardVO boardVO = new BoardVO();
		boardVO = boardService.getOneBoard(id, false);

		model.addAttribute("boardVO", boardVO);

		// 파일의 경로를 전달한다.
		return "board/boardmodify";
	}

	@PostMapping("/board/modify/{id}")
	public String doModifyOneBoard(@PathVariable int id, ModifyBoardVO modifyBoardVO, Model model) {

		modifyBoardVO.setId(id);

		boolean isUpdated = this.boardService.updateOneBoard(modifyBoardVO);

		if (isUpdated) {
			// 성공적으로 수정했다면 수정한 게시글의 상세조회 페이지로 이동시킨다.
			System.out.println("게시글 수정이 정상적으로 작성함.");
			return "redirect:/board/view?id=" + id;

		} else {
			// 사용자가 작성했던 내용을 JSP에 그대로 보내준다.
			// 모델 데이터를 보내줘야한다.
			model.addAttribute("boardVO", modifyBoardVO);
			System.out.println("게시글 수정이 정상적으로 작성되지 않음.");
			return "board/boardmodify";
		}
	}

	@GetMapping("/board/delete/{id}")
	public String deleteOneBoardGet(@PathVariable int id) {
		boolean isDeleted = boardService.deleteOneBoard(id);

		if (isDeleted) {
			System.out.println("게시글 삭제에 성공함.");
			return "redirect:/board/list"; // 게시글 목록 페이지로 리다이렉트
		} else {
			return "redirect:/board/view?id=" + id; // 삭제 실패 시 게시글 상세보기로 리다이렉트
		}
	}

	@GetMapping("/board/file/download/{id}")
	public ResponseEntity<Resource> downloadFile(@PathVariable int id) {

		// 1. 다운로드 할 파일의 이름을 알기 위해 게시글을 조회한다.
		BoardVO boardVO = this.boardService.getOneBoard(id, false);

		// 2. 다운로드 할 파일의 정보를 가지고 있는 File인스턴스를 생성한다.
		File downloadFile = new File("/Users/jeong-uijin/Desktop/uploadfiles", boardVO.getFileName());

		// 3. HTTP Header에 파일 다운로드 정보를 설정한다.
		HttpHeaders header = new HttpHeaders();
		// HTTP 리스폰스에 파일을 첨부해서 보낼건데 파일의 이름은 ~~~이야.
		header.add(HttpHeaders.CONTENT_DISPOSITION, "attachment; filename=" + boardVO.getOriginFileName());

		// 4. 브라우저에게 파일을 전송한다.
		InputStreamResource resource = null;
		try {
			resource = new InputStreamResource(new FileInputStream(downloadFile));
		} catch (FileNotFoundException e) {
			e.printStackTrace();
			throw new IllegalArgumentException("파일이 존재하지 않습니다.");
		}
		// 브라우저에게 보낼 응답 데이터를 생성한다.
		return ResponseEntity.ok()
							// 응답 데이터에 http header 정보를 셋팅한다. (파일다운로드 정보)
							 .headers(header)
							 // 다운로드시킬 파일의 크기를 전달한다. - 브라우저가 파일 다운로드 진행 상태를 관리하기 위해서.
							 .contentLength(downloadFile.length())
							 // 다운로드 시킬 파일의 타입을 지정한다.
							 // 보통 png 파일이라면 image/png 이렇게 지정하는데
							 // 타입과 관계없이 강제 다운로드를 시킬려면 "application/octet-stream"을 이용한다.
							 .contentType(MediaType.parseMediaType("application/octet-stream"))
							 // 파일을 응답데잍터에 전달한다.
							 .body(resource);
	}

}
