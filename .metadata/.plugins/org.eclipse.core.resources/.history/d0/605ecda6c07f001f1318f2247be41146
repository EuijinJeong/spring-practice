package com.ktdsuniversity.edu.hello_spring.common.beans;

import java.io.File;
import java.io.IOException;
import java.util.UUID;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;
import org.springframework.web.multipart.MultipartFile;

/**
 * @Component: Spring Bean을 생성하셈!
 */

@Component
public class FileHandler {

	@Value("${app.martipart.base-dir}")
	private String baseDirectory;

	@Value("${app.martipart.obfuscation.enable}")
	private boolean enableObfuscation;

	@Value("${app.martipart.hide-ext.enable}")
	private boolean enableHideExtention;

	public void storeFile(MultipartFile multipartFile) {
		// 1. client가 파일을 전송 했는지 체크한다.
		// 보안상의 이유로 파일이름을 난독화 시킨다.
		
		// 2. 클라이언트가 파일을 전송했다면
		if (multipartFile != null && !multipartFile.isEmpty()) {
			// 3. 파일을 서버 컴퓨터의 특정 폴더로 저장시킨다.
			String obfuscatedFileName = multipartFile.getOriginalFilename();

			if(this.enableObfuscation) {
				String ext = obfuscatedFileName.substring(obfuscatedFileName.lastIndexOf("."));
				
				obfuscatedFileName = UUID.randomUUID().toString();
				
				if(this.enableHideExtention) {
					
				}
				
			}
			
			File uploadFile = new File(this.baseDirectory, obfuscatedFileName);
			if (!uploadFile.getParentFile().exists()) {
				uploadFile.getParentFile().mkdirs();
			}

			try {
				multipartFile.transferTo(uploadFile);
			} catch (IllegalStateException | IOException e) {
				e.printStackTrace();
				throw new RuntimeException("예기치 못한 이유로 업로드에 실패했습니다. 잠시 후 다시 시도해주세요.");
			}
		}
	}

	public void downloadFile(String fileName, String originFileName) {

	}

	public void deleteFile(String fileName) {

	}
}
